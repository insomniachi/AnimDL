<v:UserListPageBase
    x:Class="AnimDL.WinUI.Views.UserListPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:animations="using:CommunityToolkit.WinUI.UI.Animations"
    xmlns:ctk="using:CommunityToolkit.WinUI.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:help="using:AnimDL.WinUI.Helpers"
    xmlns:mal="using:MalApi"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:uc="using:AnimDL.WinUI.UserControls"
    xmlns:v="using:AnimDL.WinUI.Views"
    xmlns:viewmodels="using:AnimDL.WinUI.ViewModels"
    xmlns:views="using:AnimDL.WinUI.Views"
    Name="Page"
    d:DataContext="{d:DesignInstance Type=viewmodels:UserListViewModel}"
    mc:Ignorable="d">
    <v:UserListPageBase.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Styles/RadioButton.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </v:UserListPageBase.Resources>

    <Grid x:Name="ContentArea">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <ListBox
            x:Name="StatusStrip"
            Margin="{StaticResource SmallTopBottomMargin}"
            HorizontalAlignment="Center"
            ItemsSource="{x:Bind Statuses}"
            SelectedItem="{x:Bind ViewModel.CurrentView, Mode=TwoWay}">
            <ListBox.ItemTemplate>
                <DataTemplate x:DataType="mal:AnimeStatus">
                    <TextBlock
                        Width="200"
                        Text="{x:Bind v:UserListPage.ToStatusString((mal:AnimeStatus))}"
                        TextAlignment="Center" />
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <ItemsStackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
        </ListBox>

        <ctk:SwitchPresenter Grid.Row="1" Value="{x:Bind ViewModel.Mode, Mode=OneWay}">
            <ctk:Case Value="{x:Bind views:DisplayMode.Grid}">
                <GridView
                    x:Name="AnimeListView"
                    animations:ItemsReorderAnimation.Duration="00:00:00.4000000"
                    IsItemClickEnabled="True"
                    ItemsSource="{x:Bind ViewModel.Anime}">
                    <GridView.ItemTemplate>
                        <DataTemplate x:DataType="mal:Anime">
                            <uc:AnimeCard x:Name="Card" Anime="{x:Bind}">
                                <uc:AnimeCard.Flyout>
                                    <MenuFlyout>
                                        <MenuFlyoutItem
                                            Command="{Binding ElementName=Card, Path=UpdateStatusCommand}"
                                            CommandParameter="{x:Bind}"
                                            Text="Update">
                                            <MenuFlyoutItem.Icon>
                                                <SymbolIcon Symbol="PostUpdate" />
                                            </MenuFlyoutItem.Icon>
                                        </MenuFlyoutItem>
                                    </MenuFlyout>
                                </uc:AnimeCard.Flyout>
                            </uc:AnimeCard>
                        </DataTemplate>
                    </GridView.ItemTemplate>
                    <GridView.ItemContainerStyle>
                        <Style TargetType="GridViewItem">
                            <Setter Property="Margin" Value="10" />
                        </Style>
                    </GridView.ItemContainerStyle>
                </GridView>
            </ctk:Case>
            <ctk:Case Value="{x:Bind views:DisplayMode.List}">
                <ctk:DataGrid
                    AutoGenerateColumns="False"
                    IsReadOnly="True"
                    ItemsSource="{x:Bind ViewModel.Anime}"
                    SelectionMode="Single">
                    <ctk:DataGrid.Columns>
                        <ctk:DataGridTextColumn
                            Width="*"
                            Binding="{Binding Title}"
                            Header="Title" />
                        <ctk:DataGridTemplateColumn Width="150" Header="Rating">
                            <ctk:DataGridTemplateColumn.CellTemplate>
                                <DataTemplate x:DataType="mal:Anime">
                                    <RatingControl
                                        IsReadOnly="True"
                                        ToolTipService.ToolTip="{x:Bind UserStatus.Score}"
                                        Value="{x:Bind help:AnimeHelpers.ScoreToRating(UserStatus.Score)}" />
                                </DataTemplate>
                            </ctk:DataGridTemplateColumn.CellTemplate>
                        </ctk:DataGridTemplateColumn>
                        <ctk:DataGridTemplateColumn Width="100" Header="Ep">
                            <ctk:DataGridTemplateColumn.CellTemplate>
                                <DataTemplate x:DataType="mal:Anime">
                                    <TextBlock HorizontalAlignment="Center" Text="{x:Bind help:AnimeHelpers.Eps((mal:Anime))}" />
                                </DataTemplate>
                            </ctk:DataGridTemplateColumn.CellTemplate>
                        </ctk:DataGridTemplateColumn>
                        <ctk:DataGridTemplateColumn Width="150" Header="Day">
                            <ctk:DataGridTemplateColumn.CellTemplate>
                                <DataTemplate x:DataType="mal:Anime">
                                    <TextBlock HorizontalAlignment="Center" Text="{x:Bind Broadcast.DayOfWeek}" />
                                </DataTemplate>
                            </ctk:DataGridTemplateColumn.CellTemplate>
                        </ctk:DataGridTemplateColumn>
                    </ctk:DataGrid.Columns>
                </ctk:DataGrid>
            </ctk:Case>
        </ctk:SwitchPresenter>

        <ctk:Loading
            x:Name="LoadingControl"
            Grid.Row="1"
            IsLoading="{x:Bind ViewModel.IsLoading, Mode=TwoWay}">
            <ctk:Loading.Background>
                <AcrylicBrush TintColor="Black" TintOpacity="0.4" />
            </ctk:Loading.Background>
            <ProgressRing Margin="0,0,12,0" IsActive="True" />
        </ctk:Loading>


        <CommandBar
            Grid.Row="2"
            Background="{ThemeResource SystemControlBackgroundChromeMediumBrush}"
            DefaultLabelPosition="Bottom">
            <AppBarButton
                Command="{x:Bind ViewModel.RefreshCommand}"
                Icon="Refresh"
                Label="Refresh" />
            <AppBarButton Icon="View" Label="Display mode">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <MenuFlyoutItem
                            Command="{x:Bind ViewModel.SetDisplayMode}"
                            CommandParameter="{x:Bind views:DisplayMode.Grid}"
                            Text="Grid view">
                            <MenuFlyoutItem.Icon>
                                <FontIcon Glyph="&#xf0e2;" />
                            </MenuFlyoutItem.Icon>
                        </MenuFlyoutItem>
                        <MenuFlyoutItem
                            Command="{x:Bind ViewModel.SetDisplayMode}"
                            CommandParameter="{x:Bind views:DisplayMode.List}"
                            Text="List view">
                            <MenuFlyoutItem.Icon>
                                <FontIcon Glyph="&#xf0e4;" />
                            </MenuFlyoutItem.Icon>
                        </MenuFlyoutItem>
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
            <AppBarButton Icon="Filter" Label="Filter">
                <AppBarButton.Flyout>
                    <MenuFlyout>
                        <RadioMenuFlyoutItem
                            x:Name="WatchingFlyoutToggle"
                            Command="{x:Bind ViewModel.ChangeCurrentViewCommand}"
                            CommandParameter="{x:Bind mal:AnimeStatus.Watching}"
                            Text="Watching" />
                        <RadioMenuFlyoutItem
                            x:Name="PtwFlyoutToggle"
                            Command="{x:Bind ViewModel.ChangeCurrentViewCommand}"
                            CommandParameter="{x:Bind mal:AnimeStatus.PlanToWatch}"
                            Text="Plan to watch" />
                        <RadioMenuFlyoutItem
                            x:Name="OnHoldFlyoutToggle"
                            Command="{x:Bind ViewModel.ChangeCurrentViewCommand}"
                            CommandParameter="{x:Bind mal:AnimeStatus.OnHold}"
                            Text="On Hold" />
                        <RadioMenuFlyoutItem
                            x:Name="CompletedFlyoutToggle"
                            Command="{x:Bind ViewModel.ChangeCurrentViewCommand}"
                            CommandParameter="{x:Bind mal:AnimeStatus.Completed}"
                            Text="Completed" />
                        <RadioMenuFlyoutItem
                            x:Name="DroppedFlyoutToggle"
                            Command="{x:Bind ViewModel.ChangeCurrentViewCommand}"
                            CommandParameter="{x:Bind mal:AnimeStatus.Dropped}"
                            Text="Dropped" />
                    </MenuFlyout>
                </AppBarButton.Flyout>
            </AppBarButton>
        </CommandBar>
    </Grid>
</v:UserListPageBase>
